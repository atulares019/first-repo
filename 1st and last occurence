To find the first and last occurence

#include <iostream>
using namespace std;

int findFirstOccurrence(int arr[], int n, int target) {
    int start = 0;
    int end = n - 1;
    int result = -1;

    while (start <= end) {
        int mid = start + (end - start) / 2;

        if (arr[mid] == target) {
            result = mid;
            end = mid - 1;
        } else if (arr[mid] < target) {
            start = mid + 1;
        } else {
            end = mid - 1;
        }
    }

    return result;
}

int findLastOccurrence(int arr[], int n, int target) {
    int start = 0;
    int end = n - 1;
    int result = -1;

    while (start <= end) {
        int mid = start + (end - start) / 2;

        if (arr[mid] == target) {
            result = mid;
            start = mid + 1;
        } else if (arr[mid] < target) {
            start = mid + 1;
        } else {
            end = mid - 1;
        }
    }

    return result;
}

int main() {
    int arr[] = {2, 4, 10, 10, 10, 18, 20};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target;
    cout<<"enter the target"<<endl;
    cin>>target;

    int firstOccurrence = findFirstOccurrence(arr, n, target);
    int lastOccurrence = findLastOccurrence(arr, n, target);

    if (firstOccurrence != -1) {
        std::cout << "First occurrence of " << target << " is at index " << firstOccurrence << std::endl;
    } else {
        std::cout << "Element not found." << std::endl;
    }

    if (lastOccurrence != -1) {
        std::cout << "Last occurrence of " << target << " is at index " << lastOccurrence << std::endl;
    } else {
        std::cout << "Element not found." << std::endl;
    }

    return 0;
}
